/**
 * Implements the Rodent's Revenge game.
 * Rodent's Revenge is a classic cat-and-mouse game with a twist:
 * You are the mouse, and you are trying to outsmart the cats and
 * trap them before they catch you.
 * To succeed at Rodent's Revenge, you have to be fast and clever.
 * The 4 arrow keys are used to move the mouse up, down, left, and right.
 */

class RodentGame {
    field Mouse mouse;    // the mouse of this game
	field Cat cat, cat1;  // the cat of this game
	field boolean catWasEaten, cat1WasEaten;
	field Array cats;
	field int direction;  // the mouse's current direction: 
                          // 0=none, 1=up, 2=down, 3=left, 4=right


    /** Constructs a new Rodent Game. */
    constructor RodentGame new() {
        do Screen.clearScreen();
        do drawBlocks();
		let mouse = Mouse.new();
		let cats = Array.new(10);
		let cat = Cat.new(0);
		let cat1 = Cat.new(1);
		let catWasEaten = false;
		let cat1WasEaten = false;
		return this;
   }

   /** Disposes this game. */
   method void dispose() {
	  do mouse.dispose();
	  do cat.dispose();
	  do cat1.dispose();
	  do cats.dispose();
      do Memory.deAlloc(this);
      return;
   }
   
   /** If the player won (i.e. all cats were eaten by the mouse), the game is ended.
       Prints an informative message, disposes the game's objects, and disposes the game. */
   method void win() {
	  var String message;
	  do Screen.setColor(false);
	  do Screen.drawRectangle(0, 0, 511, 255);
	  let message = String.new(45);
	  do Output.println();
	  let message = "Congratulations! You have won the game.";
	  do Output.printString(message);
	  do Output.println();
	  let message = "This game is a real fun, isn't  it?!";
	  do Output.printString(message);
	  do Output.println();
	  let message = "Come back soon!  : )";
	  do Output.printString(message);
	  do message.dispose();
	  return;
   }
   
   /** If the player lost (i.e. the mouse was eaten by a cat), the game is over.
       Prints an informative message, disposes the game's objects, and disposes the game. */
   method void gameOver() {
	  var String message;
	  do Screen.setColor(false);
	  do Screen.drawRectangle(0, 0, 511, 255);
	  let message = String.new(40);
	  let message = "Game Over!";
	  do Output.println();
	  do Output.printString(message);
	  let message = "You were pretty good.";
	  do Output.println();
	  do Output.printString(message);
	  let message = "Next time you will do even better.";
	  do Output.println();
	  do Output.printString(message);
	  let message = "Come back soon!  : )";
	  do Output.println();
	  do Output.printString(message);
	  do message.dispose();
	  return;
   }

   /** Draws the blocks of the game on the screen. */
   method void drawBlocks() {
      do Screen.setColor(true);
	  do Screen.drawRectangle(48, 48, 463, 207);
      return;
   }
   
   /** Updates the status (standing/sitting/cheese) of the cat. */
   method void updateCatStatus() {
      if (~((cat.getStatus() = 2) & (cat1.getStatus() = 2))) {
		  if (cat.cantMove()) {
			  do cat.setStatus(1);
			  do cat.draw();
		  }
		  else {
			  do cat.setStatus(0);
			  do cat.draw();
		  }
		  if (cat1.cantMove()) {
			  if (cat.cantMove()) {
				  do cat.setStatus(2);
				  do cat.draw();
				  do cat1.setStatus(2);
				  do cat1.draw();
			  }
			  else {
				  do cat1.setStatus(1);
				  do cat1.draw();
			  }
		  }
		  else {
			  do cat1.setStatus(0);
			  do cat1.draw();
		  }
      }
	  return;
   }
   
   /** Checks if the mouse has collided one of the cats. */
   method boolean mouseAndCatCollided() {
       var boolean endGame;
	   let endGame = false;
       if ((mouse.getX() = cat.getX()) & (mouse.getY() = cat.getY())) {
	       if (cat.getStatus() = 2) {
		       let catWasEaten = true;
		       do cat.dispose();
		   }
		   else {
		       do gameOver();
			   let endGame = true;
		   }
	   }
	   if ((mouse.getX() = cat1.getX()) & (mouse.getY() = cat1.getY())) {
	       if (cat1.getStatus() = 2) {
		       let cat1WasEaten = true;
			   do cat1.dispose();
		   }
		   else {
		       do gameOver();
			   let endGame = true;
		   }
	   }
	   if ((catWasEaten) & (cat1WasEaten)) {
	       do win();
		   let endGame = true;
	   }
	   return endGame;
   }
   
   /** Runs the game: Moves the cats. Moves the mouse according to the user's input. */
   method void run() {
      var char key;     // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      
      while (~exit) {
         // waits for a key to be pressed
         let key = Keyboard.keyPressed();

         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow

         do mouse.move(direction);
		 if (mouse.pushedBlock()) {
		     if (mouse.blockMovedCat()) {
			     if (~(cat.getStatus() = 2)) {
		             do cat.move(mouse.getX(), mouse.getY());
		         }
				 if (~(cat1.getStatus() = 2)) {
		             do cat1.move(mouse.getX(), mouse.getY());
		         }
				 do updateCatStatus();
				 if (mouseAndCatCollided()) {
		             let exit = true;
		         }
			 }
		     do mouse.drawPushedBlock();
		 }
		 if (~(cat.getStatus() = 2)) {
		     do cat.move(mouse.getX(), mouse.getY());
		 }
		 if (~(cat1.getStatus() = 2)) {
		     do cat1.move(mouse.getX(), mouse.getY());
		 }
		 do updateCatStatus();
		 if (mouseAndCatCollided()) {
		     let exit = true;
		 }
         let key = 0;
         do Sys.wait(100);    // delays the next movement
		 let direction = 0;
     } // while
     return;
   }
}



